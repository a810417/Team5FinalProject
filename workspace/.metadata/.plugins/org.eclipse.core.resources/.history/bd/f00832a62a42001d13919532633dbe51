package fifth.game.springbootgame.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import fifth.game.springbootgame.model.Member;
import fifth.game.springbootgame.service.MemberService;

@Controller
public class PageController {

	@Autowired
	private MemberService mService;

	@GetMapping("/")
	public String goHome() {
		return "index";
	}

	@GetMapping("/backend.controller")
	public String backEndPage() {
		return "pages/backend";
	}

	// 新增會員
	@GetMapping("/insertMember.controller")
	public String processMain() {
		return "pages/insertMember";
	}
	@PostMapping(path = "/insertMem.controller")
	public String processInsertAction(@RequestParam("account") String account,
			@RequestParam("password") String password, @RequestParam("nickname") String nickname,
			@RequestParam("email") String email, @RequestParam("photo") MultipartFile photo, Model model)
			throws IOException {

		byte[] pByte = photo.getBytes();
		Member m = new Member();
		m.setAccount(account);
		m.setPassword(password);
		m.setNickname(nickname);
		m.setEmail(email);
		m.setPhoto(pByte);
		Member newMem = mService.insert(m);
		model.addAttribute("newMem", newMem);

		return "pages/insertDone";
	}
	
	// 刪除會員
	@GetMapping(path = "/delete/{id}")
	public String processDeleteAction(@PathVariable("id") Integer id) {
		mService.deleteById(id);
		return "redirect:/show.controller";
	}

	@GetMapping(path = "/delM.controller")
	public String processDelAction(Member m) {
		mService.delete(m);
		return "pages/deleteDone";
	}

	

	@GetMapping(path = "/show.controller")
	public String processSelectAction(Model m) {
		List<Member> list = mService.selectAll();
		m.addAttribute("list", list);

		return "pages/showAll";
	}
	
	// 搜尋會員
	@GetMapping(path="/findMember.controller")
	public String findMemberPage() {
		return "pages/findMember";
	}
	
	@GetMapping(path="/findById.controller")
	public String processFindById(@RequestParam(name="id") Integer id, Model m) {
		Member mem = mService.findMemberById(id);
		System.out.println(mem.getId()+" "+mem.getAccount()+" "+mem.getNickname());
		if(mem!=null) {
			m.addAttribute("mem", mem);
			return "pages/showPage";
		}
		return "pages/noMember";
	}
	
	// 修改會員
	@GetMapping(path = "/updateMember/{id}")
	public String queryUpdateMember(@PathVariable("id") Integer id, Model model) {
		Member mem = mService.findMemberById(id);
		model.addAttribute("mem", mem);
		
		return "memberToUpdate";
	}
	
	
	public String updateMemberAction(@RequestParam("id") Integer id,@RequestParam("account") String account,
			@RequestParam("password") String password, @RequestParam("nickname") String nickname,
			@RequestParam("email") String email, @RequestParam("photo") MultipartFile photo, Model model) {
		mService.findMemberById(null);
	}
	
	@GetMapping("/downloadImage/{id}")
	public ResponseEntity<byte[]> downloadImage(@PathVariable Integer id) {
		byte[] pByte = mService.getPhotoById(id);

		System.out.println(pByte);

		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.IMAGE_JPEG);
		return new ResponseEntity<byte[]>(pByte, headers, HttpStatus.OK);
	}
}
